#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;

class SRMCodingPhase{
public:
    int getpoint(vector<int>& points, vector<int>& skills, int* lt){
        int i;
        int ret = 0;
        int tm = 0;

        vector<pair<int,int> > time; // time,index
        for(i=0; i<3; i++){
            time.push_back( make_pair(max(0, skills[i] - lt[i]), i) );
        }
        sort(time.begin(), time.end());
        for(i=0; i<3; i++){
            tm += time[i].first;
            if( tm > 75 ) break;
            int id = time[i].second;
            ret += points[id] - id*time[i].first;
        }
        return ret;
    }

    int countScore(vector <int> points, vector <int> skills, int luck){
        int i,j,k;
        int ret = 0;
        int lt[3];

        vector<int> v;
        v.push_back(0);
        v.push_back(1);
        v.push_back(2);

        for(i=0; i<=luck; i++){
            for(j=0; j<=luck-i; j++){
                lt[0] = i;
                lt[1] = j;
                lt[2] = luck-i-j;
                sort(v.begin(), v.end());
                do{
                    ret = max(ret, getpoint(points, skills, lt));
                }while( next_permutation(v.begin(), v.end()) );
            }
        }

        return ret;
    }
};


int main(){
    SRMCodingPhase S;
    int *p[] = {250, 500, 1000};
    int *s[] = {10, 25, 40};

    vector<int> po, ski;
    for(int i=0; i<3; i++){
        po.push_back(p[i]);
        ski.push_back(s[i]);
    }

    cout << S.countScore(po, ski, 0) << endl;

    return 0;
}
